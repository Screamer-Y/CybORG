from ipaddress import IPv4Address

from CybORG.Shared import Observation
from CybORG.Simulator.Actions import Action
from CybORG.Simulator.Actions.ConcreteActions.Portscan import Portscan
from CybORG.ReproductionExtension.Simulator.StateExtension import StateExtension
from CybORG.ReproductionExtension.Simulator.AbstractVulnerability import AbstractVulnerability
from CybORG.ReproductionExtension.Actions.AbstractActions.IPDiscovered import IPDiscovered
from CybORG.Simulator.Actions.AbstractActions.DiscoverNetworkServices import DiscoverNetworkServices
from CybORG.Simulator.Actions.AbstractActions.ExploitRemoteService import ExploitRemoteService


class ExploitRemoteVulnerability(Action):
    """
    Abstract Action that allows an agent to exploit a REMOTE Abstract Vulnerability.
    Action succeed if the Abstract Vulnerability exist in host and meet the REMOTE priviledge requirement.
    """
    def __init__(self, session: int, agent: str, hostname:str, absvul: AbstractVulnerability):
        super().__init__()
        self.hostname = hostname
        self.absvul = absvul
        self.agent = agent
        self.session = session

    def execute(self, state: StateExtension) -> Observation:
        # 这一块后面考虑放进replace invalid action里面
        # check if the vulnerability exists in the host
        if self.absvul.vulnerability_id not in state.get_host_absvul_map()[self.hostname]:
            return Observation(success=False)
        # 改到这里，想确认下portscan的先决条件（ip_learn?)，如果没有就设计成ip learn
        action_space = self.agent.action_space.get_action_space()
        swapped_dict = {v: k for k, v in state.ip_addresses.items()}
        host_ip = swapped_dict[self.hostname]
        if not action_space['ip_address'][host_ip]:
            return Observation(success=False)
        # 确认outcome，转入相应动作
        if isinstance(self.absvul.outcome,AbstractVulnerability.Outcome.IP_DISCOVERED):
            sub_action = IPDiscovered(self.session, self.agent, self.hostname, self.absvul)
            obs = sub_action.execute(state)
        elif isinstance(self.absvul.outcome, AbstractVulnerability.Outcome.SERVICE_EXPLOITED):
            swapped_dict = {v: k for k, v in state.ip_addresses.items()}
            target_ip = swapped_dict[self.hostname]
            sub_action = DiscoverNetworkServices(self.session, self.agent, target_ip)
            obs = sub_action.execute(state)
            sub_action = ExploitRemoteService(target_ip, self.session, self.agent)
            obs = sub_action.execute(state)
        else:
            raise ValueError("Invalid Abstract Vulnerability Outcome.")

        return obs

    def __str__(self):
        return f"{self.__class__.__name__} {self.hostname} {self.absvul.vulnerability_id}"

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False

        equality_tuple = (
                self.hostname == other.hostname,
                self.absvul == other.absvul,
                self.agent == other.agent,
                self.session == other.session,
                )

        return all(equality_tuple)
