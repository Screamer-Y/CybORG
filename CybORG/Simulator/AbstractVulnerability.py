from CybORG.Simulator.Entity import Entity
from CybORG.Simulator.Host import Host
from CybORG.Shared.EnvironmentController import EnvironmentController
from enum import Enum
from abc import ABC
from typing import List

class Prerequisite(ABC):
    """
    Define the prerequisite of exploiting a vulnerability.
    """
    def __init__(self, tool:str):
        self.tool = tool

    #TODO: need to establish the Prerequisite of using.ABC
    def check_prerequisite(self, executor:Host):
        if self.tool not in executor.tools:
            return False
        else:
            return True

class AbstractVulnerability(Entity):
    """
    Abstract Vulnerability definition
    - Agent has knowledge of the number of Abstract Vulnerability in the env.
    - A Host may contain one or more Abstract Vulnerabilities.
    - If Agent select an Abstract Vulnerability exist in the host, it become a suceessful action.
    """

    class VulnerabilityType(Enum):
        REMOTE = 0
        LOCAL = 1
    class Outcome(Enum):
        IP_DISCOVERED = 0
        SERVICE_EXPLOITED = 1

    def __init__(self, vulnerability_id:str = None, vulnerability_type:VulnerabilityType = None, hostname:str = None, environment_controller:EnvironmentController = None,target_host_id:List[str] = None, 
                outcome:Outcome = None, description:str = None, prerequisite:Prerequisite = None, bonus:float = 0, cost:float = 0):
        self.vulnerability_id = vulnerability_id
        self.vulnerability_type = vulnerability_type
        self.hostname = hostname
        self.environment_controller = environment_controller
        self.target_host_id = target_host_id
        self.outcome = outcome
        self.description = description
        self.prerequisite = prerequisite
        self.bonus = bonus
        self.cost = cost
        self.exploited = False
        self.history = {}

    def get_state(self):
        raise NotImplementedError("Abstract Vulnerability info unavailable.")

    def get_info(self):
        return f"""vulnerability id:{self.vulnerability_id},\
                    vulnerability type:{self.vulnerability_type},\
                    vulnerability outcome:{self.outcome},\
                    target host:{self.target_host_id},\
                    descrption:{self.description}"""

    def add_rollback_info_in_obs(self, obs):
        pass

    def get_history(self):
        return self.history

    def reset(self):
        self.history = {}

    def __str__(self):
        return f"Abstract Vulnerability: {self.vulnerability_id}"
