from ipaddress import IPv4Address

from CybORG.Shared import Observation
from CybORG.Simulator.Actions import Action
from CybORG.Simulator.Actions.ConcreteActions.Portscan import Portscan
from CybORG.Simulator.State import State
from CybORG.Simulator.AbstractVulnerability import AbstractVulnerability
from CybORG.Simulator.Actions.ConcreteActions.IPDiscovered import IPDiscovered
from CybORG.Simulator.Actions.AbstractActions.DiscoverNetworkServices import DiscoverNetworkServices
from CybORG.Simulator.Actions.AbstractActions.ExploitRemoteService import ExploitRemoteService
from CybORG.Shared.ActionSpace import ActionSpace
from CybORG.Simulator.Host import Status


class ExploitRemoteVulnerability(Action):
    """
    Abstract Action that allows an agent to exploit a REMOTE Abstract Vulnerability.
    Action succeed if the Abstract Vulnerability exist in host and meet the REMOTE priviledge requirement.
    """
    def __init__(self, session: int, agent: str, target_host_id:str, absvul: AbstractVulnerability):
        super().__init__()
        self.target_host_id = target_host_id
        self.absvul = absvul
        self.agent = agent
        self.session = session
        self.action_space = self.absvul.environment_controller.agent_interfaces['Red'].action_space

    def record_exploitation(self, obs):
        # Record the exploitation
        if obs.success:
            self.absvul.history[len(self.absvul.history)+1] = {'host':self.target_host_id, 'success':True}
        else:
            self.absvul.history[len(self.absvul.history)+1] = {'host':self.target_host_id, 'success':False}

    def execute(self, state: State) -> Observation:
        # check whether the host is running or reimaging
        if not state.hosts[self.target_host_id].status == Status.RUNNING:
            obs = Observation(success=False)
            self.record_exploitation(obs)
            return obs
        # check if the vulnerability exists in the host
        if self.absvul.hostname != self.target_host_id:
            obs = Observation(success=False)
            self.record_exploitation(obs)
            return obs
        # check if the vulnerability has already been exploited
        if self.absvul.exploited:
            obs = Observation(success=False)
            self.record_exploitation(obs)
            return obs
        # check if the ip of the target host is known
        swapped_dict = {v: k for k, v in state.ip_addresses.items()}
        host_ip = swapped_dict[self.target_host_id]
        if not self.action_space.ip_address[host_ip]:
            obs = Observation(success=False)
            self.record_exploitation(obs)
            return obs

        # execute action based on outcome
        if self.absvul.outcome == AbstractVulnerability.Outcome.IP_DISCOVERED:
            # TODO: if the vulnerability has been execute(blue team no exist), pass the operation and return no reward.
            sub_action = IPDiscovered(self.session, self.agent, self.target_host_id, self.absvul.target_host_id)
            obs = sub_action.execute(state)
            self.record_exploitation(obs)
        elif self.absvul.outcome == AbstractVulnerability.Outcome.SERVICE_EXPLOITED:
            # if target_host unknown, Discovered its ip first.
            swapped_dict = {v: k for k, v in state.ip_addresses.items()}
            host_ip = swapped_dict[self.absvul.target_host_id]
            if not self.action_space.ip_address[host_ip]:
                sub_action = IPDiscovered(self.session, self.agent, self.target_host_id, self.absvul.target_host_id)
                obs = sub_action.execute(state)
            # Establish high priviledge on the host
            target_ip = swapped_dict[self.absvul.target_host_id]
            sub_action = DiscoverNetworkServices(self.session, self.agent, target_ip)
            obs = sub_action.execute(state)
            sub_action = ExploitRemoteService(target_ip, self.session, self.agent)
            obs = sub_action.execute(state)
            self.record_exploitation(obs)
        else:
            raise ValueError("Invalid Abstract Vulnerability Outcome.")
        self.absvul.exploited = True

        return obs

    def __str__(self):
        return f"{self.__class__.__name__} {self.target_host_id} {self.absvul.vulnerability_id}"

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False

        equality_tuple = (
                self.target_host_id == other.target_host_id,
                self.absvul == other.absvul,
                self.agent == other.agent,
                self.session == other.session,
                )

        return all(equality_tuple)
